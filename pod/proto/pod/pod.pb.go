// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: pod.proto

package pod

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PodInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PodName       string                 `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodNamespace  string                 `protobuf:"bytes,3,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	PodTeamId     string                 `protobuf:"bytes,4,opt,name=pod_team_id,json=podTeamId,proto3" json:"pod_team_id,omitempty"`
	PodReplicas   int32                  `protobuf:"varint,5,opt,name=pod_replicas,json=podReplicas,proto3" json:"pod_replicas,omitempty"`
	PodCpuMax     float32                `protobuf:"fixed32,6,opt,name=pod_cpu_max,json=podCpuMax,proto3" json:"pod_cpu_max,omitempty"` // 最小值按比例设置 （什么意思）
	PodMemoryMax  float32                `protobuf:"fixed32,7,opt,name=pod_memory_max,json=podMemoryMax,proto3" json:"pod_memory_max,omitempty"`
	PodPort       []*PodPort             `protobuf:"bytes,8,rep,name=pod_port,json=podPort,proto3" json:"pod_port,omitempty"`
	PodEnv        []*PodEnv              `protobuf:"bytes,9,rep,name=pod_env,json=podEnv,proto3" json:"pod_env,omitempty"`
	PodPullPolicy string                 `protobuf:"bytes,10,opt,name=pod_pull_policy,json=podPullPolicy,proto3" json:"pod_pull_policy,omitempty"`
	PodRestart    string                 `protobuf:"bytes,11,opt,name=pod_restart,json=podRestart,proto3" json:"pod_restart,omitempty"`
	PodType       string                 `protobuf:"bytes,12,opt,name=pod_type,json=podType,proto3" json:"pod_type,omitempty"`
	PodImages     string                 `protobuf:"bytes,13,opt,name=pod_images,json=podImages,proto3" json:"pod_images,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PodInfo) Reset() {
	*x = PodInfo{}
	mi := &file_pod_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodInfo) ProtoMessage() {}

func (x *PodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodInfo.ProtoReflect.Descriptor instead.
func (*PodInfo) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{0}
}

func (x *PodInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PodInfo) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *PodInfo) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *PodInfo) GetPodTeamId() string {
	if x != nil {
		return x.PodTeamId
	}
	return ""
}

func (x *PodInfo) GetPodReplicas() int32 {
	if x != nil {
		return x.PodReplicas
	}
	return 0
}

func (x *PodInfo) GetPodCpuMax() float32 {
	if x != nil {
		return x.PodCpuMax
	}
	return 0
}

func (x *PodInfo) GetPodMemoryMax() float32 {
	if x != nil {
		return x.PodMemoryMax
	}
	return 0
}

func (x *PodInfo) GetPodPort() []*PodPort {
	if x != nil {
		return x.PodPort
	}
	return nil
}

func (x *PodInfo) GetPodEnv() []*PodEnv {
	if x != nil {
		return x.PodEnv
	}
	return nil
}

func (x *PodInfo) GetPodPullPolicy() string {
	if x != nil {
		return x.PodPullPolicy
	}
	return ""
}

func (x *PodInfo) GetPodRestart() string {
	if x != nil {
		return x.PodRestart
	}
	return ""
}

func (x *PodInfo) GetPodType() string {
	if x != nil {
		return x.PodType
	}
	return ""
}

func (x *PodInfo) GetPodImages() string {
	if x != nil {
		return x.PodImages
	}
	return ""
}

type PodPort struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PodId         int64                  `protobuf:"varint,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	ContainerPort int32                  `protobuf:"varint,2,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
	Protocol      string                 `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PodPort) Reset() {
	*x = PodPort{}
	mi := &file_pod_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodPort) ProtoMessage() {}

func (x *PodPort) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodPort.ProtoReflect.Descriptor instead.
func (*PodPort) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{1}
}

func (x *PodPort) GetPodId() int64 {
	if x != nil {
		return x.PodId
	}
	return 0
}

func (x *PodPort) GetContainerPort() int32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *PodPort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

type PodEnv struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PodId         int64                  `protobuf:"varint,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	EnvKey        string                 `protobuf:"bytes,2,opt,name=env_key,json=envKey,proto3" json:"env_key,omitempty"`
	EnvValue      string                 `protobuf:"bytes,3,opt,name=env_value,json=envValue,proto3" json:"env_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PodEnv) Reset() {
	*x = PodEnv{}
	mi := &file_pod_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodEnv) ProtoMessage() {}

func (x *PodEnv) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodEnv.ProtoReflect.Descriptor instead.
func (*PodEnv) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{2}
}

func (x *PodEnv) GetPodId() int64 {
	if x != nil {
		return x.PodId
	}
	return 0
}

func (x *PodEnv) GetEnvKey() string {
	if x != nil {
		return x.EnvKey
	}
	return ""
}

func (x *PodEnv) GetEnvValue() string {
	if x != nil {
		return x.EnvValue
	}
	return ""
}

type PodId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PodId         int64                  `protobuf:"varint,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PodId) Reset() {
	*x = PodId{}
	mi := &file_pod_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodId) ProtoMessage() {}

func (x *PodId) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodId.ProtoReflect.Descriptor instead.
func (*PodId) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{3}
}

func (x *PodId) GetPodId() int64 {
	if x != nil {
		return x.PodId
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msg           string                 `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_pod_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{4}
}

func (x *Response) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type FindAll struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindAll) Reset() {
	*x = FindAll{}
	mi := &file_pod_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAll) ProtoMessage() {}

func (x *FindAll) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAll.ProtoReflect.Descriptor instead.
func (*FindAll) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{5}
}

type AllPods struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PodInfo       []*PodInfo             `protobuf:"bytes,1,rep,name=pod_info,json=podInfo,proto3" json:"pod_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllPods) Reset() {
	*x = AllPods{}
	mi := &file_pod_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllPods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllPods) ProtoMessage() {}

func (x *AllPods) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllPods.ProtoReflect.Descriptor instead.
func (*AllPods) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{6}
}

func (x *AllPods) GetPodInfo() []*PodInfo {
	if x != nil {
		return x.PodInfo
	}
	return nil
}

var File_pod_proto protoreflect.FileDescriptor

const file_pod_proto_rawDesc = "" +
	"\n" +
	"\tpod.proto\x12\x03pod\"\xb4\x03\n" +
	"\aPodInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x19\n" +
	"\bpod_name\x18\x02 \x01(\tR\apodName\x12#\n" +
	"\rpod_namespace\x18\x03 \x01(\tR\fpodNamespace\x12\x1e\n" +
	"\vpod_team_id\x18\x04 \x01(\tR\tpodTeamId\x12!\n" +
	"\fpod_replicas\x18\x05 \x01(\x05R\vpodReplicas\x12\x1e\n" +
	"\vpod_cpu_max\x18\x06 \x01(\x02R\tpodCpuMax\x12$\n" +
	"\x0epod_memory_max\x18\a \x01(\x02R\fpodMemoryMax\x12'\n" +
	"\bpod_port\x18\b \x03(\v2\f.pod.PodPortR\apodPort\x12$\n" +
	"\apod_env\x18\t \x03(\v2\v.pod.PodEnvR\x06podEnv\x12&\n" +
	"\x0fpod_pull_policy\x18\n" +
	" \x01(\tR\rpodPullPolicy\x12\x1f\n" +
	"\vpod_restart\x18\v \x01(\tR\n" +
	"podRestart\x12\x19\n" +
	"\bpod_type\x18\f \x01(\tR\apodType\x12\x1d\n" +
	"\n" +
	"pod_images\x18\r \x01(\tR\tpodImages\"c\n" +
	"\aPodPort\x12\x15\n" +
	"\x06pod_id\x18\x01 \x01(\x03R\x05podId\x12%\n" +
	"\x0econtainer_port\x18\x02 \x01(\x05R\rcontainerPort\x12\x1a\n" +
	"\bprotocol\x18\x03 \x01(\tR\bprotocol\"U\n" +
	"\x06PodEnv\x12\x15\n" +
	"\x06pod_id\x18\x01 \x01(\x03R\x05podId\x12\x17\n" +
	"\aenv_key\x18\x02 \x01(\tR\x06envKey\x12\x1b\n" +
	"\tenv_value\x18\x03 \x01(\tR\benvValue\"\x1e\n" +
	"\x05PodId\x12\x15\n" +
	"\x06pod_id\x18\x01 \x01(\x03R\x05podId\"\x1c\n" +
	"\bResponse\x12\x10\n" +
	"\x03msg\x18\x01 \x01(\tR\x03msg\"\t\n" +
	"\aFindAll\"2\n" +
	"\aAllPods\x12'\n" +
	"\bpod_info\x18\x01 \x03(\v2\f.pod.PodInfoR\apodInfo2\x8b\x02\n" +
	"\x03Pod\x12'\n" +
	"\x06AddPod\x12\f.pod.PodInfo\x1a\r.pod.Response\"\x00\x12(\n" +
	"\tDeletePod\x12\n" +
	".pod.PodId\x1a\r.pod.Response\"\x00\x12*\n" +
	"\tUpdatePod\x12\f.pod.PodInfo\x1a\r.pod.Response\"\x00\x12)\n" +
	"\vFindPodByID\x12\n" +
	".pod.PodId\x1a\f.pod.PodInfo\"\x00\x12-\n" +
	"\rFindPodByName\x12\f.pod.PodInfo\x1a\f.pod.PodInfo\"\x00\x12+\n" +
	"\vFindAllPods\x12\f.pod.FindAll\x1a\f.pod.AllPods\"\x00B!Z\x1fgo-micro.dev/v5/service/pod;podb\x06proto3"

var (
	file_pod_proto_rawDescOnce sync.Once
	file_pod_proto_rawDescData []byte
)

func file_pod_proto_rawDescGZIP() []byte {
	file_pod_proto_rawDescOnce.Do(func() {
		file_pod_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pod_proto_rawDesc), len(file_pod_proto_rawDesc)))
	})
	return file_pod_proto_rawDescData
}

var file_pod_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_pod_proto_goTypes = []any{
	(*PodInfo)(nil),  // 0: pod.PodInfo
	(*PodPort)(nil),  // 1: pod.PodPort
	(*PodEnv)(nil),   // 2: pod.PodEnv
	(*PodId)(nil),    // 3: pod.PodId
	(*Response)(nil), // 4: pod.Response
	(*FindAll)(nil),  // 5: pod.FindAll
	(*AllPods)(nil),  // 6: pod.AllPods
}
var file_pod_proto_depIdxs = []int32{
	1, // 0: pod.PodInfo.pod_port:type_name -> pod.PodPort
	2, // 1: pod.PodInfo.pod_env:type_name -> pod.PodEnv
	0, // 2: pod.AllPods.pod_info:type_name -> pod.PodInfo
	0, // 3: pod.Pod.AddPod:input_type -> pod.PodInfo
	3, // 4: pod.Pod.DeletePod:input_type -> pod.PodId
	0, // 5: pod.Pod.UpdatePod:input_type -> pod.PodInfo
	3, // 6: pod.Pod.FindPodByID:input_type -> pod.PodId
	0, // 7: pod.Pod.FindPodByName:input_type -> pod.PodInfo
	5, // 8: pod.Pod.FindAllPods:input_type -> pod.FindAll
	4, // 9: pod.Pod.AddPod:output_type -> pod.Response
	4, // 10: pod.Pod.DeletePod:output_type -> pod.Response
	4, // 11: pod.Pod.UpdatePod:output_type -> pod.Response
	0, // 12: pod.Pod.FindPodByID:output_type -> pod.PodInfo
	0, // 13: pod.Pod.FindPodByName:output_type -> pod.PodInfo
	6, // 14: pod.Pod.FindAllPods:output_type -> pod.AllPods
	9, // [9:15] is the sub-list for method output_type
	3, // [3:9] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_pod_proto_init() }
func file_pod_proto_init() {
	if File_pod_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pod_proto_rawDesc), len(file_pod_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pod_proto_goTypes,
		DependencyIndexes: file_pod_proto_depIdxs,
		MessageInfos:      file_pod_proto_msgTypes,
	}.Build()
	File_pod_proto = out.File
	file_pod_proto_goTypes = nil
	file_pod_proto_depIdxs = nil
}
